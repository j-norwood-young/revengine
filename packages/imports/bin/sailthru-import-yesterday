#!/bin/bash

# This script imports all the Sailthru logs into MongoDB
# The following collections are used:
# filename | collection | indexes
# blast | sailthru_blast | id
# message_blast | sailthru_message_blast | blast_id,profile_id
# message_blast_updates - sailthru_message_blast | blast_id,profile_id
# message_transactional - sailthru_message_transactional | id,profile_id
# message_transactional_updates - sailthru_message_transactional | id,profile_id
# profile - sailthru_profile | id

# Vars
DIR=/data/dm-sailthru-data-explorer
SID=9943
CURRENT_DATE=$(date -d "yesterday 13:00" '+%Y%m%d')
DB=revengine-prod
HOSTS=rs1/rfvengine1,rfvengine2,rfvengine3,rfvengine4
# Calculate running time
start=$(date +%s.%N)

# File eg: 
# 9943_blast.20231130.json 
# 9943_message_blast.20231229.json
# 9943_message_blast_updates.20231229.json
# 9943_message_transactional.20231229.json
# 9943_message_transactional_updates.20231229.json
# 9943_profile.20231229.json

# Process for blast
for file in "${DIR}/${SID}_blast.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_blast --file=$file --quiet
done

# Process for message_blast
for file in "${DIR}/${SID}_message_blast.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_message_blast --file=$file --quiet
done

# Process for message_blast_updates
for file in "${DIR}/${SID}_message_blast_updates.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_message_blast --file=$file --quiet
done

# Fix date types
mongosh --host=${HOSTS} --eval 'var cursor = db.sailthru_message_blast.find({ _processed: { $ne: true } }).limit(1500000);
var upserts = [];
cursor.forEach(function(doc) {
    var new_doc = {};
    new_doc.send_time = new Date(doc.send_time);
    if (doc.opens) {
        new_doc.opens = [];
        doc.opens.forEach(function(open) {
            new_doc.opens.push({
                ts: new Date(open.ts)
            });
        });
        new_doc.open_count = new_doc.opens.length;
        new_doc.open_time = new_doc.opens[0].ts;
    }
    if (doc.clicks) {
        new_doc.clicks = [];
        doc.clicks.forEach(function(click) {
            new_doc.clicks.push({
                url: click.url,
                ts: new Date(click.ts)
            });
        });
        new_doc.click_count = new_doc.clicks.length;
        new_doc.click_time = new_doc.clicks[0].ts;
    }
    new_doc._processed = true;
    upserts.push({
        updateOne: {
            filter: { _id: doc._id },
            update: { $set: new_doc }
        }
    });
});
db.sailthru_message_blast.bulkWrite(upserts);' ${DB}

# Process for message_transactional
for file in "${DIR}/${SID}_message_transactional.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_message_transactional --file=$file --quiet
done

# Process for message_transactional_updates
for file in "${DIR}/${SID}_message_transactional_updates.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_message_transactional --file=$file --quiet
done

# Fix date types
mongosh --host=${HOSTS} --eval 'db.sailthru_message_transactional.updateMany( {send_time: { $type: "string" } }, [ { $set: { send_time: { $dateFromString: { dateString: "$send_time" } }, open_time: { $dateFromString: { dateString: "$open_time" } }, click_time: { $dateFromString: { dateString: "$click_time" } }, } } ] )' ${DB}

# Process for profile
for file in "${DIR}/${SID}_profile.${CURRENT_DATE}.json"
do
    echo "Importing $file"
    mongoimport --host=${HOSTS} --db=${DB} --collection=sailthru_profile --file=$file --quiet
done

# Fix date types
mongosh --host=${HOSTS} --eval 'db.sailthru_profile.updateMany({ create_date: { $type: "string" } }, [{ $set: { create_date: { $dateFromString: { dateString: "$create_date" } }, last_open: { $dateFromString: { dateString: "$last_open" } },last_click: { $dateFromString: { dateString: "$last_click" } },last_pageview: { $dateFromString: { dateString: "$last_pageview" } },signup_time: { $dateFromString: { dateString: "$signup_time" } },var_time: { $dateFromString: { dateString: "$var_time" } }, } }])' ${DB}

# Calculate running time
end=$(date +%s.%N)
runtime=$(awk "BEGIN {print $end - $start}")
echo "Runtime was $runtime"

# Aggregate count by day
mongosh --host=${HOSTS} --eval 'var d = new Date();
d.setDate(d.getDate()-7);
db.sailthru_message_blast.aggregate([
    { 
        $match: { send_time: { $gte: d}} 
    }, { 
        $group: { _id: { $dateToString: { format: "%Y-%m-%d", date: "$send_time" } }, count: { $sum: 1 } } 
    }, {
        $sort: { _id: 1 }
    } 
])' ${DB}