var axios = require("axios");

class JXPHelper {
	constructor(opts) {
		this.config(opts);
		if (!this.server) throw ("parameter 'server' required");
		this.api = this.server + "/api";
	}
	
	config(opts) {
		for (var opt in opts) {
			this[opt] = opts[opt];
		}
	};
	
	_configParams(opts) {
		opts = opts || {};
		opts.apikey = this.apikey;
		var parts = [];
		for (var opt in opts) {
			if (Array.isArray(opts[opt])) {
				opts[opt].forEach(val => {
					parts.push(opt + "=" + val);
				});
			} else {
				parts.push(opt + "=" + opts[opt]);
			}
		}
		return parts.join("&");
	};

	_randomString() {
		return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
	}

	_displayError(err) {
		try {
			console.error(`${new Date().toISOString()}\turl: ${err.config.url}\tmethod: ${err.request.method}\tstatus: ${err.response.status}\tstatusText: ${err.response.statusText}\tdata: ${(err.response.data) ? JSON.stringify(err.response.data) : 'No data'}`);
		} catch (parseErr) {
			console.error(err);
		}
	}

	url(type, opts) {
		return `${this.api}/${type}?${this._configParams(opts)}`;
	}

	async login(email, password) {
		try {
			const login = await axios.post(`${this.server}/login`, { email, password });
			const data = login.data;
			const user = (await axios.get(`${this.api}/user/${data.user_id}?apikey=${this.apikey}`)).data;
			console.log(user);
			return { data, user };
		} catch (err) {
			console.error(err);
			if (err.response.status === 400) {
				return "API not responding";
			}
			return err.response.data;
		}
	}

	async getOne(type, id, opts) {
		const label = `getOne.${type}-${this._randomString()}`;
		if (this.debug) console.time(label);
		const url = `${this.api}/${type}/${id}?${this._configParams(opts)}`;
		try {
			var result = await axios.get(url);
			if (this.debug) console.timeEnd(label);
			if (result.status !== 200) {
				throw(result.statusText);
			}
			return result.data;
		} catch(err) {
			if (this.debug) console.timeEnd(label);
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async get(type, opts) {
		const label = `get.${type}-${this._randomString()}`;
		if (this.debug) console.time(label);
		var url = this.url(type, opts);
		try {
			var result = await axios.get(url);
			if (this.debug) console.timeEnd(label);
			if (result.status !== 200) {
				throw(result.statusText);
			}
			return result.data;
		} catch(err) {
			if (this.debug) console.timeEnd(label);
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async query (type, query, opts) {
		const label = `query.${type}-${this._randomString()}`;
		if (this.debug) console.time(label);
		var url = `${this.server}/query/${type}?${_configParams(opts)}`;
		try {
			var result = await axios.post(url, {query});
			if (this.debug) console.timeEnd(label);
			if (result.status !== 200) {
				throw(result.statusText);
			}
			return result.data;
		} catch(err) {
			if (this.debug) console.timeEnd(label);
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async count(type, opts) {
		const label = `count.${type}-${this._randomString()}`;
		if (this.debug) console.time(label);
		opts = opts || {};
		opts.limit = 1;
		var url = this.url(type, opts);
		try {
			var result = await axios.get(url);
			if (this.debug) console.timeEnd(label);
			if (result.status !== 200) {
				throw (result.statusText);
			}
			return result.data.count;
		} catch (err) {
			if (this.debug) console.timeEnd(label);
			this._displayError(err);
			throw (err.response ? err.response.data : err);
		}
	}

	async post(type, data) {
		var url = `${this.api}/${type}?apikey=${this.apikey}`;
		if (this.debug) console.log("POSTing to ", url, data);
		try {
			return (await axios.post(url, data)).data;
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async put(type, id, data) {
		var url = `${this.api}/${type}/${id}?apikey=${this.apikey}`;
		if (this.debug) console.log("PUTting to ", url, data);
		try {
			return (await axios.put(url, data)).data;
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async postput(type, key, data) {
		// Post if we find key=id, else put
		var obj = {};
		obj[`filter[${key}]`] = data[key];
		try {
			var result = await this.get(type, obj);
			if (result.count) {
				var id = result.data[0]._id;
				return this.put(type, id, data);
			} else {
				return this.post(type, data);
			}
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async del(type, id) {
		var url = `${this.api}/${type}/${id}?apikey=${this.apikey}`;
		try {
			return (await axios.delete(url)).data;
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	// This should be rewritten as an async pattern
	async del_all(type, key, id) {
		var obj = {};
		obj[`filter[${key}]`] = id;
		try {
			const results = [];
			const items = (await self.get(type, obj)).data;
			for (let item of items) {
				results.push(await this.del(type, item._id));
			}
			return results;
		} catch(err) {
			this._displayError(err);
			throw (err.response ? err.response.data : err);
		}
	}

	async sync(type, key, id, data) {
		// Given the records filtered by key = id, we create, update or delete until we are in sync with data.
		var obj = {};
		obj[`filter[${key}]`] = id;
		try {
			let results = [];
			const data = await this.get(type, obj).data;
			const data_ids = data.filter(row => row._id).map(row => row._id);
			const dest_ids = data.map(row => row._id);
			const deletes = dest_ids.filter(n => data_ids.indexOf(n) == -1) || [];
			const moreinserts = data_ids.filter(n => dest_ids.indexOf(n) == -1) || [];
			const inserts = data.filter(row => moreinserts.indexOf(row._id) != -1) || !(row._id);
			const update_ids = dest_ids.filter(n => data_ids.indexOf(n) != -1) || [];
			const updates = data.filter(row => update_ids.indexOf(row._id) != -1) || [];
			for (let insert of inserts) {
				if (this.debug) console.log("Inserting", insert);
				results.push(await this.post(type, insert));
			}
			for (let update of updates) {
				if (this.debug) console.log("Updating", update);
				results.push(await self.put(type, update._id, update));
			}
			for (let del of deletes) {
				if (this.debug) console.log("Deleting", del);
				results.push(await this.del(type, del));
			}
			return results;
		} catch(err) {
			this._displayError(err);
			throw (err.response ? err.response.data : err);
		}
	}

	async call(type, cmd, data) {
		//Call a function in the model
		var url = `${this.server}/call/${type}/${cmd}?apikey=${this.apikey}`;
		if (this.debug) console.log("CALLing  ", url, data);
		try {
			return (await axios.post(url, data)).data;
		} catch(err) {
			throw(err.response ? err.response.data : err);
		}
	}

	async groups_put(user_id, groups) {
		var url = `${this.server}/groups/${user_id}?apikey=${this.apikey}`;
		try {
			return (await axios.put(url, { group: groups })).data;
		} catch(err) {
			throw(err.response ? err.response.data : err);
		}
	}

	async groups_del(user_id, group) {
		var url = `${this.server}/groups/${user_id}?group=${group}&apikey=${this.apikey}`;
		try {
			return (await axios.delete(url)).data;
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async groups_post(user_id, groups) {
		var url = `${this.server}/groups/${user_id}?apikey=${this.apikey}`;
		var data = { group: groups };
		if (this.debug) console.log("GROUP POSTing", url, data);
		try {
			return (await axios.post(url, data)).data;
		} catch(err) {
			this._displayError(err);
			throw(err.response ? err.response.data : err);
		}
	}

	async getjwt(email) {
		try {
			const jwt = (await axios.post(`${this.server}/login/getjwt?apikey=${self.apikey}`, { email })).data;
			return jwt;
		} catch (err) {
			if (err.response && err.response.data)
				return Promise.reject(err.response.data);
			return Promise.reject(err);
		}
	}
};

module.exports = JXPHelper;

